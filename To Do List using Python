import tkinter as tk
from tkinter import messagebox
import os

class ToDoListApp:
    def __init__(self, root):
        self.root = root
        self.root.title("To-Do List Application")
        self.root.geometry("500x400")
        self.root.configure(bg="#34495E")

        self.tasks = []
        self.load_tasks()

        self.frame = tk.Frame(self.root, bg="#34495E")
        self.frame.pack(pady=10)

        self.task_listbox = tk.Listbox(
            self.frame, 
            height=15, 
            width=50, 
            bg="#ECF0F1", 
            fg="#2C3E50", 
            font=("Arial", 12), 
            selectbackground="#3498DB"
        )
        self.task_listbox.pack(side=tk.LEFT, fill=tk.BOTH, padx=(10, 0))

        self.scrollbar = tk.Scrollbar(self.frame)
        self.scrollbar.pack(side=tk.RIGHT, fill=tk.BOTH)

        self.task_listbox.config(yscrollcommand=self.scrollbar.set)
        self.scrollbar.config(command=self.task_listbox.yview)

        self.entry_task = tk.Entry(
            self.root, 
            width=50, 
            font=("Arial", 12), 
            bg="#ECF0F1", 
            fg="#2C3E50"
        )
        self.entry_task.pack(pady=10)

        self.button_frame = tk.Frame(self.root, bg="#34495E")
        self.button_frame.pack(pady=10)

        self.add_task_button = tk.Button(
            self.button_frame, 
            text="Add Task", 
            command=self.add_task, 
            bg="#2ECC71", 
            fg="#ECF0F1", 
            font=("Arial", 10, "bold")
        )
        self.add_task_button.pack(side=tk.LEFT, padx=5)

        self.delete_task_button = tk.Button(
            self.button_frame, 
            text="Delete Task", 
            command=self.delete_task, 
            bg="#E74C3C", 
            fg="#ECF0F1", 
            font=("Arial", 10, "bold")
        )
        self.delete_task_button.pack(side=tk.LEFT, padx=5)

        self.update_task_button = tk.Button(
            self.button_frame, 
            text="Update Task", 
            command=self.update_task, 
            bg="#F39C12", 
            fg="#ECF0F1", 
            font=("Arial", 10, "bold")
        )
        self.update_task_button.pack(side=tk.LEFT, padx=5)

        self.load_tasks_in_listbox()

    def load_tasks(self):
        if os.path.exists("tasks.txt"):
            with open("tasks.txt", "r") as file:
                tasks = file.readlines()
                self.tasks = [task.strip() for task in tasks]

    def save_tasks(self):
        with open("tasks.txt", "w") as file:
            for task in self.tasks:
                file.write(f"{task}\n")

    def load_tasks_in_listbox(self):
        self.task_listbox.delete(0, tk.END)
        for task in self.tasks:
            self.task_listbox.insert(tk.END, task)

    def add_task(self):
        task = self.entry_task.get()
        if task:
            self.tasks.append(task)
            self.load_tasks_in_listbox()
            self.save_tasks()
            self.entry_task.delete(0, tk.END)
        else:
            messagebox.showwarning("Warning", "You must enter a task.")

    def delete_task(self):
        try:
            selected_task_index = self.task_listbox.curselection()[0]
            self.tasks.pop(selected_task_index)
            self.load_tasks_in_listbox()
            self.save_tasks()
        except IndexError:
            messagebox.showwarning("Warning", "You must select a task to delete.")

    def update_task(self):
        try:
            selected_task_index = self.task_listbox.curselection()[0]
            new_task = self.entry_task.get()
            if new_task:
                self.tasks[selected_task_index] = new_task
                self.load_tasks_in_listbox()
                self.save_tasks()
                self.entry_task.delete(0, tk.END)
            else:
                messagebox.showwarning("Warning", "You must enter a new task.")
        except IndexError:
            messagebox.showwarning("Warning", "You must select a task to update.")

if __name__ == "__main__":
    root = tk.Tk()
    app = ToDoListApp(root)
    root.mainloop()
