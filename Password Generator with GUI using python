import tkinter as tk
from tkinter import messagebox
from tkinter import ttk
import random
import string

class PasswordGeneratorApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Password Generator")
        self.root.geometry("400x300")
        
        style = ttk.Style()
        style.configure("TFrame", background="#282c34")
        style.configure("TLabel", background="#282c34", foreground="white")
        style.configure("TCheckbutton", background="#282c34", foreground="white", font=("Arial", 12))
        style.configure("TButton", background="#61afef", font=("Arial", 12))
        style.configure("TEntry", font=("Arial", 12))
        
        main_frame = ttk.Frame(root, padding="10")
        main_frame.pack(fill=tk.BOTH, expand=True)

        # Frame for length input
        frame_length = ttk.Frame(main_frame)
        frame_length.pack(pady=10)
        
        ttk.Label(frame_length, text="Password Length: ").pack(side=tk.LEFT)
        self.length_entry = ttk.Entry(frame_length, width=5)
        self.length_entry.pack(side=tk.LEFT)
        
        # Frame for character set checkboxes
        frame_charsets = ttk.Frame(main_frame)
        frame_charsets.pack(pady=10)
        
        self.use_uppercase = tk.BooleanVar()
        self.use_lowercase = tk.BooleanVar()
        self.use_digits = tk.BooleanVar()
        self.use_special = tk.BooleanVar()
        
        ttk.Checkbutton(frame_charsets, text="Uppercase", variable=self.use_uppercase).pack(anchor=tk.W)
        ttk.Checkbutton(frame_charsets, text="Lowercase", variable=self.use_lowercase).pack(anchor=tk.W)
        ttk.Checkbutton(frame_charsets, text="Digits", variable=self.use_digits).pack(anchor=tk.W)
        ttk.Checkbutton(frame_charsets, text="Special Characters", variable=self.use_special).pack(anchor=tk.W)
        
        # Button to generate password
        ttk.Button(main_frame, text="Generate Password", command=self.generate_password).pack(pady=10)
        
        # Entry to display the generated password
        self.password_entry = ttk.Entry(main_frame, width=50)
        self.password_entry.pack(pady=10)
        
    def generate_password(self):
        try:
            length = int(self.length_entry.get())
            use_uppercase = self.use_uppercase.get()
            use_lowercase = self.use_lowercase.get()
            use_digits = self.use_digits.get()
            use_special = self.use_special.get()

            password = self._generate_password(length, use_uppercase, use_lowercase, use_digits, use_special)
            self.password_entry.delete(0, tk.END)
            self.password_entry.insert(0, password)
        except ValueError as e:
            messagebox.showerror("Error", str(e))
        except Exception as e:
            messagebox.showerror("Error", "An unexpected error occurred")

    def _generate_password(self, length, use_uppercase, use_lowercase, use_digits, use_special):
        if not (use_uppercase or use_lowercase or use_digits or use_special):
            raise ValueError("At least one character set must be selected")
        if length < (use_uppercase + use_lowercase + use_digits + use_special):
            raise ValueError("Password length must be at least equal to the number of selected character sets")

        password_characters = ''
        if use_uppercase:
            password_characters += string.ascii_uppercase
        if use_lowercase:
            password_characters += string.ascii_lowercase
        if use_digits:
            password_characters += string.digits
        if use_special:
            password_characters += string.punctuation

        password = []
        if use_uppercase:
            password.append(random.choice(string.ascii_uppercase))
        if use_lowercase:
            password.append(random.choice(string.ascii_lowercase))
        if use_digits:
            password.append(random.choice(string.digits))
        if use_special:
            password.append(random.choice(string.punctuation))

        for _ in range(length - len(password)):
            password.append(random.choice(password_characters))

        random.shuffle(password)
        return ''.join(password)

if __name__ == "__main__":
    root = tk.Tk()
    app = PasswordGeneratorApp(root)
    root.mainloop()
